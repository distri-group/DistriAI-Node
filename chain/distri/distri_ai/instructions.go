// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package distri_ai

import (
	"bytes"
	"fmt"
	ag_spew "github.com/davecgh/go-spew/spew"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_text "github.com/gagliardetto/solana-go/text"
	ag_treeout "github.com/gagliardetto/treeout"
)

var ProgramID ag_solanago.PublicKey

func SetProgramID(pubkey ag_solanago.PublicKey) {
	ProgramID = pubkey
	ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
}

const ProgramName = "DistriAi"

func init() {
	if !ProgramID.IsZero() {
		ag_solanago.RegisterInstructionDecoder(ProgramID, registryDecodeInstruction)
	}
}

var (
	Instruction_AddMachine = ag_binary.TypeID([8]byte{148, 26, 70, 80, 42, 110, 107, 230})

	Instruction_RemoveMachine = ag_binary.TypeID([8]byte{85, 41, 207, 236, 20, 250, 8, 97})

	Instruction_MakeOffer = ag_binary.TypeID([8]byte{214, 98, 97, 35, 59, 12, 44, 178})

	Instruction_CancelOffer = ag_binary.TypeID([8]byte{92, 203, 223, 40, 92, 89, 53, 119})

	Instruction_SubmitTask = ag_binary.TypeID([8]byte{148, 183, 26, 116, 107, 213, 118, 213})

	Instruction_RewardPoolDeposit = ag_binary.TypeID([8]byte{208, 248, 236, 51, 132, 38, 27, 208})

	Instruction_Claim = ag_binary.TypeID([8]byte{62, 198, 214, 193, 213, 159, 108, 210})

	Instruction_PlaceOrder = ag_binary.TypeID([8]byte{51, 194, 155, 175, 109, 130, 96, 106})

	Instruction_RenewOrder = ag_binary.TypeID([8]byte{216, 180, 12, 76, 71, 44, 165, 151})

	Instruction_StartOrder = ag_binary.TypeID([8]byte{8, 217, 8, 81, 184, 75, 128, 198})

	Instruction_RefundOrder = ag_binary.TypeID([8]byte{164, 168, 47, 144, 154, 1, 241, 255})

	Instruction_OrderCompleted = ag_binary.TypeID([8]byte{60, 28, 38, 17, 211, 99, 139, 226})

	Instruction_OrderFailed = ag_binary.TypeID([8]byte{27, 173, 43, 153, 198, 108, 109, 66})

	Instruction_RemoveOrder = ag_binary.TypeID([8]byte{118, 116, 244, 40, 144, 211, 242, 51})

	Instruction_AdminRemoveOrder = ag_binary.TypeID([8]byte{120, 68, 51, 2, 103, 164, 213, 81})

	Instruction_CreateAiModel = ag_binary.TypeID([8]byte{210, 121, 102, 94, 247, 85, 173, 215})

	Instruction_RemoveAiModel = ag_binary.TypeID([8]byte{239, 39, 190, 250, 232, 8, 160, 106})

	Instruction_CreateDataset = ag_binary.TypeID([8]byte{63, 151, 84, 132, 246, 167, 216, 122})

	Instruction_RemoveDataset = ag_binary.TypeID([8]byte{114, 128, 121, 235, 46, 207, 76, 98})

	Instruction_ReportAiModelDatasetReward = ag_binary.TypeID([8]byte{9, 222, 200, 183, 93, 189, 184, 14})

	Instruction_ClaimAiModelDatasetReward = ag_binary.TypeID([8]byte{24, 8, 164, 205, 125, 162, 253, 163})

	Instruction_AdminInitStatistics = ag_binary.TypeID([8]byte{15, 199, 115, 228, 40, 15, 96, 231})

	Instruction_AdminCloseStatistics = ag_binary.TypeID([8]byte{247, 38, 164, 92, 71, 209, 62, 171})

	Instruction_MigrateMachineNew = ag_binary.TypeID([8]byte{225, 152, 229, 88, 158, 61, 69, 125})

	Instruction_MigrateMachineRename = ag_binary.TypeID([8]byte{188, 135, 117, 64, 94, 119, 3, 147})

	Instruction_MigrateOrderNew = ag_binary.TypeID([8]byte{112, 238, 201, 126, 89, 115, 139, 207})

	Instruction_MigrateOrderRename = ag_binary.TypeID([8]byte{130, 182, 20, 92, 66, 194, 99, 205})
)

// InstructionIDToName returns the name of the instruction given its ID.
func InstructionIDToName(id ag_binary.TypeID) string {
	switch id {
	case Instruction_AddMachine:
		return "AddMachine"
	case Instruction_RemoveMachine:
		return "RemoveMachine"
	case Instruction_MakeOffer:
		return "MakeOffer"
	case Instruction_CancelOffer:
		return "CancelOffer"
	case Instruction_SubmitTask:
		return "SubmitTask"
	case Instruction_RewardPoolDeposit:
		return "RewardPoolDeposit"
	case Instruction_Claim:
		return "Claim"
	case Instruction_PlaceOrder:
		return "PlaceOrder"
	case Instruction_RenewOrder:
		return "RenewOrder"
	case Instruction_StartOrder:
		return "StartOrder"
	case Instruction_RefundOrder:
		return "RefundOrder"
	case Instruction_OrderCompleted:
		return "OrderCompleted"
	case Instruction_OrderFailed:
		return "OrderFailed"
	case Instruction_RemoveOrder:
		return "RemoveOrder"
	case Instruction_AdminRemoveOrder:
		return "AdminRemoveOrder"
	case Instruction_CreateAiModel:
		return "CreateAiModel"
	case Instruction_RemoveAiModel:
		return "RemoveAiModel"
	case Instruction_CreateDataset:
		return "CreateDataset"
	case Instruction_RemoveDataset:
		return "RemoveDataset"
	case Instruction_ReportAiModelDatasetReward:
		return "ReportAiModelDatasetReward"
	case Instruction_ClaimAiModelDatasetReward:
		return "ClaimAiModelDatasetReward"
	case Instruction_AdminInitStatistics:
		return "AdminInitStatistics"
	case Instruction_AdminCloseStatistics:
		return "AdminCloseStatistics"
	case Instruction_MigrateMachineNew:
		return "MigrateMachineNew"
	case Instruction_MigrateMachineRename:
		return "MigrateMachineRename"
	case Instruction_MigrateOrderNew:
		return "MigrateOrderNew"
	case Instruction_MigrateOrderRename:
		return "MigrateOrderRename"
	default:
		return ""
	}
}

type Instruction struct {
	ag_binary.BaseVariant
}

func (inst *Instruction) EncodeToTree(parent ag_treeout.Branches) {
	if enToTree, ok := inst.Impl.(ag_text.EncodableToTree); ok {
		enToTree.EncodeToTree(parent)
	} else {
		parent.Child(ag_spew.Sdump(inst))
	}
}

var InstructionImplDef = ag_binary.NewVariantDefinition(
	ag_binary.AnchorTypeIDEncoding,
	[]ag_binary.VariantType{
		{
			"add_machine", (*AddMachine)(nil),
		},
		{
			"remove_machine", (*RemoveMachine)(nil),
		},
		{
			"make_offer", (*MakeOffer)(nil),
		},
		{
			"cancel_offer", (*CancelOffer)(nil),
		},
		{
			"submit_task", (*SubmitTask)(nil),
		},
		{
			"reward_pool_deposit", (*RewardPoolDeposit)(nil),
		},
		{
			"claim", (*Claim)(nil),
		},
		{
			"place_order", (*PlaceOrder)(nil),
		},
		{
			"renew_order", (*RenewOrder)(nil),
		},
		{
			"start_order", (*StartOrder)(nil),
		},
		{
			"refund_order", (*RefundOrder)(nil),
		},
		{
			"order_completed", (*OrderCompleted)(nil),
		},
		{
			"order_failed", (*OrderFailed)(nil),
		},
		{
			"remove_order", (*RemoveOrder)(nil),
		},
		{
			"admin_remove_order", (*AdminRemoveOrder)(nil),
		},
		{
			"create_ai_model", (*CreateAiModel)(nil),
		},
		{
			"remove_ai_model", (*RemoveAiModel)(nil),
		},
		{
			"create_dataset", (*CreateDataset)(nil),
		},
		{
			"remove_dataset", (*RemoveDataset)(nil),
		},
		{
			"report_ai_model_dataset_reward", (*ReportAiModelDatasetReward)(nil),
		},
		{
			"claim_ai_model_dataset_reward", (*ClaimAiModelDatasetReward)(nil),
		},
		{
			"admin_init_statistics", (*AdminInitStatistics)(nil),
		},
		{
			"admin_close_statistics", (*AdminCloseStatistics)(nil),
		},
		{
			"migrate_machine_new", (*MigrateMachineNew)(nil),
		},
		{
			"migrate_machine_rename", (*MigrateMachineRename)(nil),
		},
		{
			"migrate_order_new", (*MigrateOrderNew)(nil),
		},
		{
			"migrate_order_rename", (*MigrateOrderRename)(nil),
		},
	},
)

func (inst *Instruction) ProgramID() ag_solanago.PublicKey {
	return ProgramID
}

func (inst *Instruction) Accounts() (out []*ag_solanago.AccountMeta) {
	return inst.Impl.(ag_solanago.AccountsGettable).GetAccounts()
}

func (inst *Instruction) Data() ([]byte, error) {
	buf := new(bytes.Buffer)
	if err := ag_binary.NewBorshEncoder(buf).Encode(inst); err != nil {
		return nil, fmt.Errorf("unable to encode instruction: %w", err)
	}
	return buf.Bytes(), nil
}

func (inst *Instruction) TextEncode(encoder *ag_text.Encoder, option *ag_text.Option) error {
	return encoder.Encode(inst.Impl, option)
}

func (inst *Instruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) error {
	return inst.BaseVariant.UnmarshalBinaryVariant(decoder, InstructionImplDef)
}

func (inst *Instruction) MarshalWithEncoder(encoder *ag_binary.Encoder) error {
	err := encoder.WriteBytes(inst.TypeID.Bytes(), false)
	if err != nil {
		return fmt.Errorf("unable to write variant type: %w", err)
	}
	return encoder.Encode(inst.Impl)
}

func registryDecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (interface{}, error) {
	inst, err := DecodeInstruction(accounts, data)
	if err != nil {
		return nil, err
	}
	return inst, nil
}

func DecodeInstruction(accounts []*ag_solanago.AccountMeta, data []byte) (*Instruction, error) {
	inst := new(Instruction)
	if err := ag_binary.NewBorshDecoder(data).Decode(inst); err != nil {
		return nil, fmt.Errorf("unable to decode instruction: %w", err)
	}
	if v, ok := inst.Impl.(ag_solanago.AccountsSettable); ok {
		err := v.SetAccounts(accounts)
		if err != nil {
			return nil, fmt.Errorf("unable to set accounts for instruction: %w", err)
		}
	}
	return inst, nil
}
