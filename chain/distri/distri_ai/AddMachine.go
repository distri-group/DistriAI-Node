// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package distri_ai

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// AddMachine is the `addMachine` instruction.
type AddMachine struct {
	Uuid     *[16]uint8
	Metadata *string

	// [0] = [WRITE] machine
	//
	// [1] = [WRITE, SIGNER] owner
	//
	// [2] = [WRITE] statisticsOwner
	//
	// [3] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewAddMachineInstructionBuilder creates a new `AddMachine` instruction builder.
func NewAddMachineInstructionBuilder() *AddMachine {
	nd := &AddMachine{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetUuid sets the "uuid" parameter.
func (inst *AddMachine) SetUuid(uuid [16]uint8) *AddMachine {
	inst.Uuid = &uuid
	return inst
}

// SetMetadata sets the "metadata" parameter.
func (inst *AddMachine) SetMetadata(metadata string) *AddMachine {
	inst.Metadata = &metadata
	return inst
}

// SetMachineAccount sets the "machine" account.
func (inst *AddMachine) SetMachineAccount(machine ag_solanago.PublicKey) *AddMachine {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(machine).WRITE()
	return inst
}

// GetMachineAccount gets the "machine" account.
func (inst *AddMachine) GetMachineAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOwnerAccount sets the "owner" account.
func (inst *AddMachine) SetOwnerAccount(owner ag_solanago.PublicKey) *AddMachine {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(owner).WRITE().SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
func (inst *AddMachine) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetStatisticsOwnerAccount sets the "statisticsOwner" account.
func (inst *AddMachine) SetStatisticsOwnerAccount(statisticsOwner ag_solanago.PublicKey) *AddMachine {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(statisticsOwner).WRITE()
	return inst
}

// GetStatisticsOwnerAccount gets the "statisticsOwner" account.
func (inst *AddMachine) GetStatisticsOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *AddMachine) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *AddMachine {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *AddMachine) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst AddMachine) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_AddMachine,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst AddMachine) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *AddMachine) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Uuid == nil {
			return errors.New("Uuid parameter is not set")
		}
		if inst.Metadata == nil {
			return errors.New("Metadata parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Machine is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.StatisticsOwner is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *AddMachine) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("AddMachine")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=2]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("    Uuid", *inst.Uuid))
						paramsBranch.Child(ag_format.Param("Metadata", *inst.Metadata))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("        machine", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("          owner", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("statisticsOwner", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("  systemProgram", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj AddMachine) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Uuid` param:
	err = encoder.Encode(obj.Uuid)
	if err != nil {
		return err
	}
	// Serialize `Metadata` param:
	err = encoder.Encode(obj.Metadata)
	if err != nil {
		return err
	}
	return nil
}
func (obj *AddMachine) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Uuid`:
	err = decoder.Decode(&obj.Uuid)
	if err != nil {
		return err
	}
	// Deserialize `Metadata`:
	err = decoder.Decode(&obj.Metadata)
	if err != nil {
		return err
	}
	return nil
}

// NewAddMachineInstruction declares a new AddMachine instruction with the provided parameters and accounts.
func NewAddMachineInstruction(
	// Parameters:
	uuid [16]uint8,
	metadata string,
	// Accounts:
	machine ag_solanago.PublicKey,
	owner ag_solanago.PublicKey,
	statisticsOwner ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *AddMachine {
	return NewAddMachineInstructionBuilder().
		SetUuid(uuid).
		SetMetadata(metadata).
		SetMachineAccount(machine).
		SetOwnerAccount(owner).
		SetStatisticsOwnerAccount(statisticsOwner).
		SetSystemProgramAccount(systemProgram)
}
