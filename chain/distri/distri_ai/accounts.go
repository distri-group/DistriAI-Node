// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package distri_ai

import (
	"fmt"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
)

type AiModel struct {
	Owner      ag_solanago.PublicKey
	Name       string
	Framework  uint8
	License    uint8
	Type1      uint8
	Type2      uint8
	Tags       string
	CreateTime int64
	UpdateTime int64
}

var AiModelDiscriminator = [8]byte{42, 206, 111, 34, 42, 121, 50, 138}

func (obj AiModel) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(AiModelDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Framework` param:
	err = encoder.Encode(obj.Framework)
	if err != nil {
		return err
	}
	// Serialize `License` param:
	err = encoder.Encode(obj.License)
	if err != nil {
		return err
	}
	// Serialize `Type1` param:
	err = encoder.Encode(obj.Type1)
	if err != nil {
		return err
	}
	// Serialize `Type2` param:
	err = encoder.Encode(obj.Type2)
	if err != nil {
		return err
	}
	// Serialize `Tags` param:
	err = encoder.Encode(obj.Tags)
	if err != nil {
		return err
	}
	// Serialize `CreateTime` param:
	err = encoder.Encode(obj.CreateTime)
	if err != nil {
		return err
	}
	// Serialize `UpdateTime` param:
	err = encoder.Encode(obj.UpdateTime)
	if err != nil {
		return err
	}
	return nil
}

func (obj *AiModel) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(AiModelDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[42 206 111 34 42 121 50 138]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Framework`:
	err = decoder.Decode(&obj.Framework)
	if err != nil {
		return err
	}
	// Deserialize `License`:
	err = decoder.Decode(&obj.License)
	if err != nil {
		return err
	}
	// Deserialize `Type1`:
	err = decoder.Decode(&obj.Type1)
	if err != nil {
		return err
	}
	// Deserialize `Type2`:
	err = decoder.Decode(&obj.Type2)
	if err != nil {
		return err
	}
	// Deserialize `Tags`:
	err = decoder.Decode(&obj.Tags)
	if err != nil {
		return err
	}
	// Deserialize `CreateTime`:
	err = decoder.Decode(&obj.CreateTime)
	if err != nil {
		return err
	}
	// Deserialize `UpdateTime`:
	err = decoder.Decode(&obj.UpdateTime)
	if err != nil {
		return err
	}
	return nil
}

type Dataset struct {
	Owner      ag_solanago.PublicKey
	Name       string
	Scale      uint8
	License    uint8
	Type1      uint8
	Type2      uint8
	Tags       string
	CreateTime int64
	UpdateTime int64
}

var DatasetDiscriminator = [8]byte{242, 85, 87, 90, 234, 188, 241, 17}

func (obj Dataset) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(DatasetDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Scale` param:
	err = encoder.Encode(obj.Scale)
	if err != nil {
		return err
	}
	// Serialize `License` param:
	err = encoder.Encode(obj.License)
	if err != nil {
		return err
	}
	// Serialize `Type1` param:
	err = encoder.Encode(obj.Type1)
	if err != nil {
		return err
	}
	// Serialize `Type2` param:
	err = encoder.Encode(obj.Type2)
	if err != nil {
		return err
	}
	// Serialize `Tags` param:
	err = encoder.Encode(obj.Tags)
	if err != nil {
		return err
	}
	// Serialize `CreateTime` param:
	err = encoder.Encode(obj.CreateTime)
	if err != nil {
		return err
	}
	// Serialize `UpdateTime` param:
	err = encoder.Encode(obj.UpdateTime)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Dataset) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(DatasetDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[242 85 87 90 234 188 241 17]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Scale`:
	err = decoder.Decode(&obj.Scale)
	if err != nil {
		return err
	}
	// Deserialize `License`:
	err = decoder.Decode(&obj.License)
	if err != nil {
		return err
	}
	// Deserialize `Type1`:
	err = decoder.Decode(&obj.Type1)
	if err != nil {
		return err
	}
	// Deserialize `Type2`:
	err = decoder.Decode(&obj.Type2)
	if err != nil {
		return err
	}
	// Deserialize `Tags`:
	err = decoder.Decode(&obj.Tags)
	if err != nil {
		return err
	}
	// Deserialize `CreateTime`:
	err = decoder.Decode(&obj.CreateTime)
	if err != nil {
		return err
	}
	// Deserialize `UpdateTime`:
	err = decoder.Decode(&obj.UpdateTime)
	if err != nil {
		return err
	}
	return nil
}

type Machine struct {
	Owner                  ag_solanago.PublicKey
	Uuid                   [16]uint8
	Metadata               string
	Status                 MachineStatus
	Price                  uint64
	MaxDuration            uint32
	Disk                   uint32
	CompletedCount         uint32
	FailedCount            uint32
	Score                  uint8
	ClaimedPeriodicRewards uint64
	ClaimedTaskRewards     uint64
	OrderPda               ag_solanago.PublicKey
}

var MachineDiscriminator = [8]byte{25, 102, 22, 13, 58, 243, 138, 79}

func (obj Machine) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(MachineDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `Uuid` param:
	err = encoder.Encode(obj.Uuid)
	if err != nil {
		return err
	}
	// Serialize `Metadata` param:
	err = encoder.Encode(obj.Metadata)
	if err != nil {
		return err
	}
	// Serialize `Status` param:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return err
	}
	// Serialize `Price` param:
	err = encoder.Encode(obj.Price)
	if err != nil {
		return err
	}
	// Serialize `MaxDuration` param:
	err = encoder.Encode(obj.MaxDuration)
	if err != nil {
		return err
	}
	// Serialize `Disk` param:
	err = encoder.Encode(obj.Disk)
	if err != nil {
		return err
	}
	// Serialize `CompletedCount` param:
	err = encoder.Encode(obj.CompletedCount)
	if err != nil {
		return err
	}
	// Serialize `FailedCount` param:
	err = encoder.Encode(obj.FailedCount)
	if err != nil {
		return err
	}
	// Serialize `Score` param:
	err = encoder.Encode(obj.Score)
	if err != nil {
		return err
	}
	// Serialize `ClaimedPeriodicRewards` param:
	err = encoder.Encode(obj.ClaimedPeriodicRewards)
	if err != nil {
		return err
	}
	// Serialize `ClaimedTaskRewards` param:
	err = encoder.Encode(obj.ClaimedTaskRewards)
	if err != nil {
		return err
	}
	// Serialize `OrderPda` param:
	err = encoder.Encode(obj.OrderPda)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Machine) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(MachineDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[25 102 22 13 58 243 138 79]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `Uuid`:
	err = decoder.Decode(&obj.Uuid)
	if err != nil {
		return err
	}
	// Deserialize `Metadata`:
	err = decoder.Decode(&obj.Metadata)
	if err != nil {
		return err
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return err
	}
	// Deserialize `Price`:
	err = decoder.Decode(&obj.Price)
	if err != nil {
		return err
	}
	// Deserialize `MaxDuration`:
	err = decoder.Decode(&obj.MaxDuration)
	if err != nil {
		return err
	}
	// Deserialize `Disk`:
	err = decoder.Decode(&obj.Disk)
	if err != nil {
		return err
	}
	// Deserialize `CompletedCount`:
	err = decoder.Decode(&obj.CompletedCount)
	if err != nil {
		return err
	}
	// Deserialize `FailedCount`:
	err = decoder.Decode(&obj.FailedCount)
	if err != nil {
		return err
	}
	// Deserialize `Score`:
	err = decoder.Decode(&obj.Score)
	if err != nil {
		return err
	}
	// Deserialize `ClaimedPeriodicRewards`:
	err = decoder.Decode(&obj.ClaimedPeriodicRewards)
	if err != nil {
		return err
	}
	// Deserialize `ClaimedTaskRewards`:
	err = decoder.Decode(&obj.ClaimedTaskRewards)
	if err != nil {
		return err
	}
	// Deserialize `OrderPda`:
	err = decoder.Decode(&obj.OrderPda)
	if err != nil {
		return err
	}
	return nil
}

type MachineNew struct {
	Owner                  ag_solanago.PublicKey
	Uuid                   [16]uint8
	Metadata               string
	Status                 MachineStatus
	Price                  uint64
	MaxDuration            uint32
	Disk                   uint32
	CompletedCount         uint32
	FailedCount            uint32
	Score                  uint8
	ClaimedPeriodicRewards uint64
	ClaimedTaskRewards     uint64
	OrderPda               ag_solanago.PublicKey
}

var MachineNewDiscriminator = [8]byte{27, 50, 112, 47, 115, 74, 107, 33}

func (obj MachineNew) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(MachineNewDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `Uuid` param:
	err = encoder.Encode(obj.Uuid)
	if err != nil {
		return err
	}
	// Serialize `Metadata` param:
	err = encoder.Encode(obj.Metadata)
	if err != nil {
		return err
	}
	// Serialize `Status` param:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return err
	}
	// Serialize `Price` param:
	err = encoder.Encode(obj.Price)
	if err != nil {
		return err
	}
	// Serialize `MaxDuration` param:
	err = encoder.Encode(obj.MaxDuration)
	if err != nil {
		return err
	}
	// Serialize `Disk` param:
	err = encoder.Encode(obj.Disk)
	if err != nil {
		return err
	}
	// Serialize `CompletedCount` param:
	err = encoder.Encode(obj.CompletedCount)
	if err != nil {
		return err
	}
	// Serialize `FailedCount` param:
	err = encoder.Encode(obj.FailedCount)
	if err != nil {
		return err
	}
	// Serialize `Score` param:
	err = encoder.Encode(obj.Score)
	if err != nil {
		return err
	}
	// Serialize `ClaimedPeriodicRewards` param:
	err = encoder.Encode(obj.ClaimedPeriodicRewards)
	if err != nil {
		return err
	}
	// Serialize `ClaimedTaskRewards` param:
	err = encoder.Encode(obj.ClaimedTaskRewards)
	if err != nil {
		return err
	}
	// Serialize `OrderPda` param:
	err = encoder.Encode(obj.OrderPda)
	if err != nil {
		return err
	}
	return nil
}

func (obj *MachineNew) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(MachineNewDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[27 50 112 47 115 74 107 33]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `Uuid`:
	err = decoder.Decode(&obj.Uuid)
	if err != nil {
		return err
	}
	// Deserialize `Metadata`:
	err = decoder.Decode(&obj.Metadata)
	if err != nil {
		return err
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return err
	}
	// Deserialize `Price`:
	err = decoder.Decode(&obj.Price)
	if err != nil {
		return err
	}
	// Deserialize `MaxDuration`:
	err = decoder.Decode(&obj.MaxDuration)
	if err != nil {
		return err
	}
	// Deserialize `Disk`:
	err = decoder.Decode(&obj.Disk)
	if err != nil {
		return err
	}
	// Deserialize `CompletedCount`:
	err = decoder.Decode(&obj.CompletedCount)
	if err != nil {
		return err
	}
	// Deserialize `FailedCount`:
	err = decoder.Decode(&obj.FailedCount)
	if err != nil {
		return err
	}
	// Deserialize `Score`:
	err = decoder.Decode(&obj.Score)
	if err != nil {
		return err
	}
	// Deserialize `ClaimedPeriodicRewards`:
	err = decoder.Decode(&obj.ClaimedPeriodicRewards)
	if err != nil {
		return err
	}
	// Deserialize `ClaimedTaskRewards`:
	err = decoder.Decode(&obj.ClaimedTaskRewards)
	if err != nil {
		return err
	}
	// Deserialize `OrderPda`:
	err = decoder.Decode(&obj.OrderPda)
	if err != nil {
		return err
	}
	return nil
}

type Order struct {
	OrderId     [16]uint8
	Buyer       ag_solanago.PublicKey
	Seller      ag_solanago.PublicKey
	MachineId   [16]uint8
	Price       uint64
	Duration    uint32
	Total       uint64
	Metadata    string
	Status      OrderStatus
	OrderTime   int64
	StartTime   int64
	RefundTime  int64
	Model1Owner ag_solanago.PublicKey
	Model1Name  string
	Model2Owner ag_solanago.PublicKey
	Model2Name  string
	Model3Owner ag_solanago.PublicKey
	Model3Name  string
	Model4Owner ag_solanago.PublicKey
	Model4Name  string
	Model5Owner ag_solanago.PublicKey
	Model5Name  string
}

var OrderDiscriminator = [8]byte{134, 173, 223, 185, 77, 86, 28, 51}

func (obj Order) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(OrderDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `OrderId` param:
	err = encoder.Encode(obj.OrderId)
	if err != nil {
		return err
	}
	// Serialize `Buyer` param:
	err = encoder.Encode(obj.Buyer)
	if err != nil {
		return err
	}
	// Serialize `Seller` param:
	err = encoder.Encode(obj.Seller)
	if err != nil {
		return err
	}
	// Serialize `MachineId` param:
	err = encoder.Encode(obj.MachineId)
	if err != nil {
		return err
	}
	// Serialize `Price` param:
	err = encoder.Encode(obj.Price)
	if err != nil {
		return err
	}
	// Serialize `Duration` param:
	err = encoder.Encode(obj.Duration)
	if err != nil {
		return err
	}
	// Serialize `Total` param:
	err = encoder.Encode(obj.Total)
	if err != nil {
		return err
	}
	// Serialize `Metadata` param:
	err = encoder.Encode(obj.Metadata)
	if err != nil {
		return err
	}
	// Serialize `Status` param:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return err
	}
	// Serialize `OrderTime` param:
	err = encoder.Encode(obj.OrderTime)
	if err != nil {
		return err
	}
	// Serialize `StartTime` param:
	err = encoder.Encode(obj.StartTime)
	if err != nil {
		return err
	}
	// Serialize `RefundTime` param:
	err = encoder.Encode(obj.RefundTime)
	if err != nil {
		return err
	}
	// Serialize `Model1Owner` param:
	err = encoder.Encode(obj.Model1Owner)
	if err != nil {
		return err
	}
	// Serialize `Model1Name` param:
	err = encoder.Encode(obj.Model1Name)
	if err != nil {
		return err
	}
	// Serialize `Model2Owner` param:
	err = encoder.Encode(obj.Model2Owner)
	if err != nil {
		return err
	}
	// Serialize `Model2Name` param:
	err = encoder.Encode(obj.Model2Name)
	if err != nil {
		return err
	}
	// Serialize `Model3Owner` param:
	err = encoder.Encode(obj.Model3Owner)
	if err != nil {
		return err
	}
	// Serialize `Model3Name` param:
	err = encoder.Encode(obj.Model3Name)
	if err != nil {
		return err
	}
	// Serialize `Model4Owner` param:
	err = encoder.Encode(obj.Model4Owner)
	if err != nil {
		return err
	}
	// Serialize `Model4Name` param:
	err = encoder.Encode(obj.Model4Name)
	if err != nil {
		return err
	}
	// Serialize `Model5Owner` param:
	err = encoder.Encode(obj.Model5Owner)
	if err != nil {
		return err
	}
	// Serialize `Model5Name` param:
	err = encoder.Encode(obj.Model5Name)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Order) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(OrderDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[134 173 223 185 77 86 28 51]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `OrderId`:
	err = decoder.Decode(&obj.OrderId)
	if err != nil {
		return err
	}
	// Deserialize `Buyer`:
	err = decoder.Decode(&obj.Buyer)
	if err != nil {
		return err
	}
	// Deserialize `Seller`:
	err = decoder.Decode(&obj.Seller)
	if err != nil {
		return err
	}
	// Deserialize `MachineId`:
	err = decoder.Decode(&obj.MachineId)
	if err != nil {
		return err
	}
	// Deserialize `Price`:
	err = decoder.Decode(&obj.Price)
	if err != nil {
		return err
	}
	// Deserialize `Duration`:
	err = decoder.Decode(&obj.Duration)
	if err != nil {
		return err
	}
	// Deserialize `Total`:
	err = decoder.Decode(&obj.Total)
	if err != nil {
		return err
	}
	// Deserialize `Metadata`:
	err = decoder.Decode(&obj.Metadata)
	if err != nil {
		return err
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return err
	}
	// Deserialize `OrderTime`:
	err = decoder.Decode(&obj.OrderTime)
	if err != nil {
		return err
	}
	// Deserialize `StartTime`:
	err = decoder.Decode(&obj.StartTime)
	if err != nil {
		return err
	}
	// Deserialize `RefundTime`:
	err = decoder.Decode(&obj.RefundTime)
	if err != nil {
		return err
	}
	// Deserialize `Model1Owner`:
	err = decoder.Decode(&obj.Model1Owner)
	if err != nil {
		return err
	}
	// Deserialize `Model1Name`:
	err = decoder.Decode(&obj.Model1Name)
	if err != nil {
		return err
	}
	// Deserialize `Model2Owner`:
	err = decoder.Decode(&obj.Model2Owner)
	if err != nil {
		return err
	}
	// Deserialize `Model2Name`:
	err = decoder.Decode(&obj.Model2Name)
	if err != nil {
		return err
	}
	// Deserialize `Model3Owner`:
	err = decoder.Decode(&obj.Model3Owner)
	if err != nil {
		return err
	}
	// Deserialize `Model3Name`:
	err = decoder.Decode(&obj.Model3Name)
	if err != nil {
		return err
	}
	// Deserialize `Model4Owner`:
	err = decoder.Decode(&obj.Model4Owner)
	if err != nil {
		return err
	}
	// Deserialize `Model4Name`:
	err = decoder.Decode(&obj.Model4Name)
	if err != nil {
		return err
	}
	// Deserialize `Model5Owner`:
	err = decoder.Decode(&obj.Model5Owner)
	if err != nil {
		return err
	}
	// Deserialize `Model5Name`:
	err = decoder.Decode(&obj.Model5Name)
	if err != nil {
		return err
	}
	return nil
}

type OrderNew struct {
	OrderId     [16]uint8
	Buyer       ag_solanago.PublicKey
	Seller      ag_solanago.PublicKey
	MachineId   [16]uint8
	Price       uint64
	Duration    uint32
	Total       uint64
	Metadata    string
	Status      OrderStatus
	OrderTime   int64
	StartTime   int64
	RefundTime  int64
	Model1Owner ag_solanago.PublicKey
	Model1Name  string
	Model2Owner ag_solanago.PublicKey
	Model2Name  string
	Model3Owner ag_solanago.PublicKey
	Model3Name  string
	Model4Owner ag_solanago.PublicKey
	Model4Name  string
	Model5Owner ag_solanago.PublicKey
	Model5Name  string
}

var OrderNewDiscriminator = [8]byte{6, 203, 52, 103, 118, 10, 252, 19}

func (obj OrderNew) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(OrderNewDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `OrderId` param:
	err = encoder.Encode(obj.OrderId)
	if err != nil {
		return err
	}
	// Serialize `Buyer` param:
	err = encoder.Encode(obj.Buyer)
	if err != nil {
		return err
	}
	// Serialize `Seller` param:
	err = encoder.Encode(obj.Seller)
	if err != nil {
		return err
	}
	// Serialize `MachineId` param:
	err = encoder.Encode(obj.MachineId)
	if err != nil {
		return err
	}
	// Serialize `Price` param:
	err = encoder.Encode(obj.Price)
	if err != nil {
		return err
	}
	// Serialize `Duration` param:
	err = encoder.Encode(obj.Duration)
	if err != nil {
		return err
	}
	// Serialize `Total` param:
	err = encoder.Encode(obj.Total)
	if err != nil {
		return err
	}
	// Serialize `Metadata` param:
	err = encoder.Encode(obj.Metadata)
	if err != nil {
		return err
	}
	// Serialize `Status` param:
	err = encoder.Encode(obj.Status)
	if err != nil {
		return err
	}
	// Serialize `OrderTime` param:
	err = encoder.Encode(obj.OrderTime)
	if err != nil {
		return err
	}
	// Serialize `StartTime` param:
	err = encoder.Encode(obj.StartTime)
	if err != nil {
		return err
	}
	// Serialize `RefundTime` param:
	err = encoder.Encode(obj.RefundTime)
	if err != nil {
		return err
	}
	// Serialize `Model1Owner` param:
	err = encoder.Encode(obj.Model1Owner)
	if err != nil {
		return err
	}
	// Serialize `Model1Name` param:
	err = encoder.Encode(obj.Model1Name)
	if err != nil {
		return err
	}
	// Serialize `Model2Owner` param:
	err = encoder.Encode(obj.Model2Owner)
	if err != nil {
		return err
	}
	// Serialize `Model2Name` param:
	err = encoder.Encode(obj.Model2Name)
	if err != nil {
		return err
	}
	// Serialize `Model3Owner` param:
	err = encoder.Encode(obj.Model3Owner)
	if err != nil {
		return err
	}
	// Serialize `Model3Name` param:
	err = encoder.Encode(obj.Model3Name)
	if err != nil {
		return err
	}
	// Serialize `Model4Owner` param:
	err = encoder.Encode(obj.Model4Owner)
	if err != nil {
		return err
	}
	// Serialize `Model4Name` param:
	err = encoder.Encode(obj.Model4Name)
	if err != nil {
		return err
	}
	// Serialize `Model5Owner` param:
	err = encoder.Encode(obj.Model5Owner)
	if err != nil {
		return err
	}
	// Serialize `Model5Name` param:
	err = encoder.Encode(obj.Model5Name)
	if err != nil {
		return err
	}
	return nil
}

func (obj *OrderNew) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(OrderNewDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[6 203 52 103 118 10 252 19]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `OrderId`:
	err = decoder.Decode(&obj.OrderId)
	if err != nil {
		return err
	}
	// Deserialize `Buyer`:
	err = decoder.Decode(&obj.Buyer)
	if err != nil {
		return err
	}
	// Deserialize `Seller`:
	err = decoder.Decode(&obj.Seller)
	if err != nil {
		return err
	}
	// Deserialize `MachineId`:
	err = decoder.Decode(&obj.MachineId)
	if err != nil {
		return err
	}
	// Deserialize `Price`:
	err = decoder.Decode(&obj.Price)
	if err != nil {
		return err
	}
	// Deserialize `Duration`:
	err = decoder.Decode(&obj.Duration)
	if err != nil {
		return err
	}
	// Deserialize `Total`:
	err = decoder.Decode(&obj.Total)
	if err != nil {
		return err
	}
	// Deserialize `Metadata`:
	err = decoder.Decode(&obj.Metadata)
	if err != nil {
		return err
	}
	// Deserialize `Status`:
	err = decoder.Decode(&obj.Status)
	if err != nil {
		return err
	}
	// Deserialize `OrderTime`:
	err = decoder.Decode(&obj.OrderTime)
	if err != nil {
		return err
	}
	// Deserialize `StartTime`:
	err = decoder.Decode(&obj.StartTime)
	if err != nil {
		return err
	}
	// Deserialize `RefundTime`:
	err = decoder.Decode(&obj.RefundTime)
	if err != nil {
		return err
	}
	// Deserialize `Model1Owner`:
	err = decoder.Decode(&obj.Model1Owner)
	if err != nil {
		return err
	}
	// Deserialize `Model1Name`:
	err = decoder.Decode(&obj.Model1Name)
	if err != nil {
		return err
	}
	// Deserialize `Model2Owner`:
	err = decoder.Decode(&obj.Model2Owner)
	if err != nil {
		return err
	}
	// Deserialize `Model2Name`:
	err = decoder.Decode(&obj.Model2Name)
	if err != nil {
		return err
	}
	// Deserialize `Model3Owner`:
	err = decoder.Decode(&obj.Model3Owner)
	if err != nil {
		return err
	}
	// Deserialize `Model3Name`:
	err = decoder.Decode(&obj.Model3Name)
	if err != nil {
		return err
	}
	// Deserialize `Model4Owner`:
	err = decoder.Decode(&obj.Model4Owner)
	if err != nil {
		return err
	}
	// Deserialize `Model4Name`:
	err = decoder.Decode(&obj.Model4Name)
	if err != nil {
		return err
	}
	// Deserialize `Model5Owner`:
	err = decoder.Decode(&obj.Model5Owner)
	if err != nil {
		return err
	}
	// Deserialize `Model5Name`:
	err = decoder.Decode(&obj.Model5Name)
	if err != nil {
		return err
	}
	return nil
}

type Reward struct {
	Period             uint32
	StartTime          int64
	Pool               uint64
	MachineNum         uint32
	UnitPeriodicReward uint64
	TaskNum            uint32
	UnitTaskReward     uint64
}

var RewardDiscriminator = [8]byte{174, 129, 42, 212, 190, 18, 45, 34}

func (obj Reward) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(RewardDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Period` param:
	err = encoder.Encode(obj.Period)
	if err != nil {
		return err
	}
	// Serialize `StartTime` param:
	err = encoder.Encode(obj.StartTime)
	if err != nil {
		return err
	}
	// Serialize `Pool` param:
	err = encoder.Encode(obj.Pool)
	if err != nil {
		return err
	}
	// Serialize `MachineNum` param:
	err = encoder.Encode(obj.MachineNum)
	if err != nil {
		return err
	}
	// Serialize `UnitPeriodicReward` param:
	err = encoder.Encode(obj.UnitPeriodicReward)
	if err != nil {
		return err
	}
	// Serialize `TaskNum` param:
	err = encoder.Encode(obj.TaskNum)
	if err != nil {
		return err
	}
	// Serialize `UnitTaskReward` param:
	err = encoder.Encode(obj.UnitTaskReward)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Reward) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(RewardDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[174 129 42 212 190 18 45 34]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Period`:
	err = decoder.Decode(&obj.Period)
	if err != nil {
		return err
	}
	// Deserialize `StartTime`:
	err = decoder.Decode(&obj.StartTime)
	if err != nil {
		return err
	}
	// Deserialize `Pool`:
	err = decoder.Decode(&obj.Pool)
	if err != nil {
		return err
	}
	// Deserialize `MachineNum`:
	err = decoder.Decode(&obj.MachineNum)
	if err != nil {
		return err
	}
	// Deserialize `UnitPeriodicReward`:
	err = decoder.Decode(&obj.UnitPeriodicReward)
	if err != nil {
		return err
	}
	// Deserialize `TaskNum`:
	err = decoder.Decode(&obj.TaskNum)
	if err != nil {
		return err
	}
	// Deserialize `UnitTaskReward`:
	err = decoder.Decode(&obj.UnitTaskReward)
	if err != nil {
		return err
	}
	return nil
}

type RewardMachine struct {
	Period    uint32
	Owner     ag_solanago.PublicKey
	MachineId [16]uint8
	TaskNum   uint32
	Claimed   bool
}

var RewardMachineDiscriminator = [8]byte{106, 87, 186, 254, 4, 139, 144, 74}

func (obj RewardMachine) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(RewardMachineDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Period` param:
	err = encoder.Encode(obj.Period)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `MachineId` param:
	err = encoder.Encode(obj.MachineId)
	if err != nil {
		return err
	}
	// Serialize `TaskNum` param:
	err = encoder.Encode(obj.TaskNum)
	if err != nil {
		return err
	}
	// Serialize `Claimed` param:
	err = encoder.Encode(obj.Claimed)
	if err != nil {
		return err
	}
	return nil
}

func (obj *RewardMachine) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(RewardMachineDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[106 87 186 254 4 139 144 74]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Period`:
	err = decoder.Decode(&obj.Period)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `MachineId`:
	err = decoder.Decode(&obj.MachineId)
	if err != nil {
		return err
	}
	// Deserialize `TaskNum`:
	err = decoder.Decode(&obj.TaskNum)
	if err != nil {
		return err
	}
	// Deserialize `Claimed`:
	err = decoder.Decode(&obj.Claimed)
	if err != nil {
		return err
	}
	return nil
}

type Statistics struct {
	Owner                         ag_solanago.PublicKey
	MachineRewardClaimed          uint64
	MachineRewardClaimable        uint64
	AiModelDatasetRewardClaimed   uint64
	AiModelDatasetRewardClaimable uint64
	MachineEarning                uint64
	AiModelDatasetEarning         uint64
}

var StatisticsDiscriminator = [8]byte{51, 158, 85, 113, 41, 45, 37, 104}

func (obj Statistics) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(StatisticsDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `MachineRewardClaimed` param:
	err = encoder.Encode(obj.MachineRewardClaimed)
	if err != nil {
		return err
	}
	// Serialize `MachineRewardClaimable` param:
	err = encoder.Encode(obj.MachineRewardClaimable)
	if err != nil {
		return err
	}
	// Serialize `AiModelDatasetRewardClaimed` param:
	err = encoder.Encode(obj.AiModelDatasetRewardClaimed)
	if err != nil {
		return err
	}
	// Serialize `AiModelDatasetRewardClaimable` param:
	err = encoder.Encode(obj.AiModelDatasetRewardClaimable)
	if err != nil {
		return err
	}
	// Serialize `MachineEarning` param:
	err = encoder.Encode(obj.MachineEarning)
	if err != nil {
		return err
	}
	// Serialize `AiModelDatasetEarning` param:
	err = encoder.Encode(obj.AiModelDatasetEarning)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Statistics) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(StatisticsDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[51 158 85 113 41 45 37 104]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `MachineRewardClaimed`:
	err = decoder.Decode(&obj.MachineRewardClaimed)
	if err != nil {
		return err
	}
	// Deserialize `MachineRewardClaimable`:
	err = decoder.Decode(&obj.MachineRewardClaimable)
	if err != nil {
		return err
	}
	// Deserialize `AiModelDatasetRewardClaimed`:
	err = decoder.Decode(&obj.AiModelDatasetRewardClaimed)
	if err != nil {
		return err
	}
	// Deserialize `AiModelDatasetRewardClaimable`:
	err = decoder.Decode(&obj.AiModelDatasetRewardClaimable)
	if err != nil {
		return err
	}
	// Deserialize `MachineEarning`:
	err = decoder.Decode(&obj.MachineEarning)
	if err != nil {
		return err
	}
	// Deserialize `AiModelDatasetEarning`:
	err = decoder.Decode(&obj.AiModelDatasetEarning)
	if err != nil {
		return err
	}
	return nil
}

type Task struct {
	Uuid      [16]uint8
	Period    uint32
	Owner     ag_solanago.PublicKey
	MachineId [16]uint8
	Metadata  string
}

var TaskDiscriminator = [8]byte{79, 34, 229, 55, 88, 90, 55, 84}

func (obj Task) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Write account discriminator:
	err = encoder.WriteBytes(TaskDiscriminator[:], false)
	if err != nil {
		return err
	}
	// Serialize `Uuid` param:
	err = encoder.Encode(obj.Uuid)
	if err != nil {
		return err
	}
	// Serialize `Period` param:
	err = encoder.Encode(obj.Period)
	if err != nil {
		return err
	}
	// Serialize `Owner` param:
	err = encoder.Encode(obj.Owner)
	if err != nil {
		return err
	}
	// Serialize `MachineId` param:
	err = encoder.Encode(obj.MachineId)
	if err != nil {
		return err
	}
	// Serialize `Metadata` param:
	err = encoder.Encode(obj.Metadata)
	if err != nil {
		return err
	}
	return nil
}

func (obj *Task) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Read and check account discriminator:
	{
		discriminator, err := decoder.ReadTypeID()
		if err != nil {
			return err
		}
		if !discriminator.Equal(TaskDiscriminator[:]) {
			return fmt.Errorf(
				"wrong discriminator: wanted %s, got %s",
				"[79 34 229 55 88 90 55 84]",
				fmt.Sprint(discriminator[:]))
		}
	}
	// Deserialize `Uuid`:
	err = decoder.Decode(&obj.Uuid)
	if err != nil {
		return err
	}
	// Deserialize `Period`:
	err = decoder.Decode(&obj.Period)
	if err != nil {
		return err
	}
	// Deserialize `Owner`:
	err = decoder.Decode(&obj.Owner)
	if err != nil {
		return err
	}
	// Deserialize `MachineId`:
	err = decoder.Decode(&obj.MachineId)
	if err != nil {
		return err
	}
	// Deserialize `Metadata`:
	err = decoder.Decode(&obj.Metadata)
	if err != nil {
		return err
	}
	return nil
}
