// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package distri_ai

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// Claim is the `claim` instruction.
type Claim struct {
	Period *uint32

	// [0] = [WRITE] machine
	//
	// [1] = [] reward
	//
	// [2] = [WRITE] rewardMachine
	//
	// [3] = [WRITE, SIGNER] owner
	//
	// [4] = [WRITE] ownerAta
	//
	// [5] = [WRITE] statisticsOwner
	//
	// [6] = [WRITE] rewardPool
	//
	// [7] = [] mint
	//
	// [8] = [] tokenProgram
	//
	// [9] = [] associatedTokenProgram
	//
	// [10] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewClaimInstructionBuilder creates a new `Claim` instruction builder.
func NewClaimInstructionBuilder() *Claim {
	nd := &Claim{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 11),
	}
	return nd
}

// SetPeriod sets the "period" parameter.
func (inst *Claim) SetPeriod(period uint32) *Claim {
	inst.Period = &period
	return inst
}

// SetMachineAccount sets the "machine" account.
func (inst *Claim) SetMachineAccount(machine ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(machine).WRITE()
	return inst
}

// GetMachineAccount gets the "machine" account.
func (inst *Claim) GetMachineAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetRewardAccount sets the "reward" account.
func (inst *Claim) SetRewardAccount(reward ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(reward)
	return inst
}

// GetRewardAccount gets the "reward" account.
func (inst *Claim) GetRewardAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetRewardMachineAccount sets the "rewardMachine" account.
func (inst *Claim) SetRewardMachineAccount(rewardMachine ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(rewardMachine).WRITE()
	return inst
}

// GetRewardMachineAccount gets the "rewardMachine" account.
func (inst *Claim) GetRewardMachineAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetOwnerAccount sets the "owner" account.
func (inst *Claim) SetOwnerAccount(owner ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(owner).WRITE().SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
func (inst *Claim) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetOwnerAtaAccount sets the "ownerAta" account.
func (inst *Claim) SetOwnerAtaAccount(ownerAta ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(ownerAta).WRITE()
	return inst
}

// GetOwnerAtaAccount gets the "ownerAta" account.
func (inst *Claim) GetOwnerAtaAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetStatisticsOwnerAccount sets the "statisticsOwner" account.
func (inst *Claim) SetStatisticsOwnerAccount(statisticsOwner ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(statisticsOwner).WRITE()
	return inst
}

// GetStatisticsOwnerAccount gets the "statisticsOwner" account.
func (inst *Claim) GetStatisticsOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetRewardPoolAccount sets the "rewardPool" account.
func (inst *Claim) SetRewardPoolAccount(rewardPool ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(rewardPool).WRITE()
	return inst
}

// GetRewardPoolAccount gets the "rewardPool" account.
func (inst *Claim) GetRewardPoolAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetMintAccount sets the "mint" account.
func (inst *Claim) SetMintAccount(mint ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(mint)
	return inst
}

// GetMintAccount gets the "mint" account.
func (inst *Claim) GetMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetTokenProgramAccount sets the "tokenProgram" account.
func (inst *Claim) SetTokenProgramAccount(tokenProgram ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(tokenProgram)
	return inst
}

// GetTokenProgramAccount gets the "tokenProgram" account.
func (inst *Claim) GetTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetAssociatedTokenProgramAccount sets the "associatedTokenProgram" account.
func (inst *Claim) SetAssociatedTokenProgramAccount(associatedTokenProgram ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(associatedTokenProgram)
	return inst
}

// GetAssociatedTokenProgramAccount gets the "associatedTokenProgram" account.
func (inst *Claim) GetAssociatedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *Claim) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *Claim {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *Claim) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

func (inst Claim) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_Claim,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst Claim) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *Claim) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Period == nil {
			return errors.New("Period parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Machine is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Reward is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.RewardMachine is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.OwnerAta is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.StatisticsOwner is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.RewardPool is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.Mint is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.TokenProgram is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.AssociatedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *Claim) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("Claim")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=1]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("Period", *inst.Period))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=11]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("               machine", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                reward", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("         rewardMachine", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                 owner", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("              ownerAta", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("       statisticsOwner", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("            rewardPool", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("                  mint", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("          tokenProgram", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("associatedTokenProgram", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("         systemProgram", inst.AccountMetaSlice.Get(10)))
					})
				})
		})
}

func (obj Claim) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Period` param:
	err = encoder.Encode(obj.Period)
	if err != nil {
		return err
	}
	return nil
}
func (obj *Claim) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Period`:
	err = decoder.Decode(&obj.Period)
	if err != nil {
		return err
	}
	return nil
}

// NewClaimInstruction declares a new Claim instruction with the provided parameters and accounts.
func NewClaimInstruction(
	// Parameters:
	period uint32,
	// Accounts:
	machine ag_solanago.PublicKey,
	reward ag_solanago.PublicKey,
	rewardMachine ag_solanago.PublicKey,
	owner ag_solanago.PublicKey,
	ownerAta ag_solanago.PublicKey,
	statisticsOwner ag_solanago.PublicKey,
	rewardPool ag_solanago.PublicKey,
	mint ag_solanago.PublicKey,
	tokenProgram ag_solanago.PublicKey,
	associatedTokenProgram ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *Claim {
	return NewClaimInstructionBuilder().
		SetPeriod(period).
		SetMachineAccount(machine).
		SetRewardAccount(reward).
		SetRewardMachineAccount(rewardMachine).
		SetOwnerAccount(owner).
		SetOwnerAtaAccount(ownerAta).
		SetStatisticsOwnerAccount(statisticsOwner).
		SetRewardPoolAccount(rewardPool).
		SetMintAccount(mint).
		SetTokenProgramAccount(tokenProgram).
		SetAssociatedTokenProgramAccount(associatedTokenProgram).
		SetSystemProgramAccount(systemProgram)
}
