// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package distri_ai

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// CreateDataset is the `createDataset` instruction.
type CreateDataset struct {
	Name    *string
	Scale   *uint8
	License *uint8
	Type1   *uint8
	Type2   *uint8
	Tags    *string

	// [0] = [WRITE] dataset
	//
	// [1] = [WRITE, SIGNER] owner
	//
	// [2] = [WRITE] statisticsOwner
	//
	// [3] = [] systemProgram
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewCreateDatasetInstructionBuilder creates a new `CreateDataset` instruction builder.
func NewCreateDatasetInstructionBuilder() *CreateDataset {
	nd := &CreateDataset{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 4),
	}
	return nd
}

// SetName sets the "name" parameter.
func (inst *CreateDataset) SetName(name string) *CreateDataset {
	inst.Name = &name
	return inst
}

// SetScale sets the "scale" parameter.
func (inst *CreateDataset) SetScale(scale uint8) *CreateDataset {
	inst.Scale = &scale
	return inst
}

// SetLicense sets the "license" parameter.
func (inst *CreateDataset) SetLicense(license uint8) *CreateDataset {
	inst.License = &license
	return inst
}

// SetType1 sets the "type1" parameter.
func (inst *CreateDataset) SetType1(type1 uint8) *CreateDataset {
	inst.Type1 = &type1
	return inst
}

// SetType2 sets the "type2" parameter.
func (inst *CreateDataset) SetType2(type2 uint8) *CreateDataset {
	inst.Type2 = &type2
	return inst
}

// SetTags sets the "tags" parameter.
func (inst *CreateDataset) SetTags(tags string) *CreateDataset {
	inst.Tags = &tags
	return inst
}

// SetDatasetAccount sets the "dataset" account.
func (inst *CreateDataset) SetDatasetAccount(dataset ag_solanago.PublicKey) *CreateDataset {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(dataset).WRITE()
	return inst
}

// GetDatasetAccount gets the "dataset" account.
func (inst *CreateDataset) GetDatasetAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetOwnerAccount sets the "owner" account.
func (inst *CreateDataset) SetOwnerAccount(owner ag_solanago.PublicKey) *CreateDataset {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(owner).WRITE().SIGNER()
	return inst
}

// GetOwnerAccount gets the "owner" account.
func (inst *CreateDataset) GetOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetStatisticsOwnerAccount sets the "statisticsOwner" account.
func (inst *CreateDataset) SetStatisticsOwnerAccount(statisticsOwner ag_solanago.PublicKey) *CreateDataset {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(statisticsOwner).WRITE()
	return inst
}

// GetStatisticsOwnerAccount gets the "statisticsOwner" account.
func (inst *CreateDataset) GetStatisticsOwnerAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetSystemProgramAccount sets the "systemProgram" account.
func (inst *CreateDataset) SetSystemProgramAccount(systemProgram ag_solanago.PublicKey) *CreateDataset {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(systemProgram)
	return inst
}

// GetSystemProgramAccount gets the "systemProgram" account.
func (inst *CreateDataset) GetSystemProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

func (inst CreateDataset) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_CreateDataset,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst CreateDataset) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *CreateDataset) Validate() error {
	// Check whether all (required) parameters are set:
	{
		if inst.Name == nil {
			return errors.New("Name parameter is not set")
		}
		if inst.Scale == nil {
			return errors.New("Scale parameter is not set")
		}
		if inst.License == nil {
			return errors.New("License parameter is not set")
		}
		if inst.Type1 == nil {
			return errors.New("Type1 parameter is not set")
		}
		if inst.Type2 == nil {
			return errors.New("Type2 parameter is not set")
		}
		if inst.Tags == nil {
			return errors.New("Tags parameter is not set")
		}
	}

	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Dataset is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.Owner is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.StatisticsOwner is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.SystemProgram is not set")
		}
	}
	return nil
}

func (inst *CreateDataset) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("CreateDataset")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=6]").ParentFunc(func(paramsBranch ag_treeout.Branches) {
						paramsBranch.Child(ag_format.Param("   Name", *inst.Name))
						paramsBranch.Child(ag_format.Param("  Scale", *inst.Scale))
						paramsBranch.Child(ag_format.Param("License", *inst.License))
						paramsBranch.Child(ag_format.Param("  Type1", *inst.Type1))
						paramsBranch.Child(ag_format.Param("  Type2", *inst.Type2))
						paramsBranch.Child(ag_format.Param("   Tags", *inst.Tags))
					})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=4]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("        dataset", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("          owner", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("statisticsOwner", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("  systemProgram", inst.AccountMetaSlice.Get(3)))
					})
				})
		})
}

func (obj CreateDataset) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	// Serialize `Name` param:
	err = encoder.Encode(obj.Name)
	if err != nil {
		return err
	}
	// Serialize `Scale` param:
	err = encoder.Encode(obj.Scale)
	if err != nil {
		return err
	}
	// Serialize `License` param:
	err = encoder.Encode(obj.License)
	if err != nil {
		return err
	}
	// Serialize `Type1` param:
	err = encoder.Encode(obj.Type1)
	if err != nil {
		return err
	}
	// Serialize `Type2` param:
	err = encoder.Encode(obj.Type2)
	if err != nil {
		return err
	}
	// Serialize `Tags` param:
	err = encoder.Encode(obj.Tags)
	if err != nil {
		return err
	}
	return nil
}
func (obj *CreateDataset) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	// Deserialize `Name`:
	err = decoder.Decode(&obj.Name)
	if err != nil {
		return err
	}
	// Deserialize `Scale`:
	err = decoder.Decode(&obj.Scale)
	if err != nil {
		return err
	}
	// Deserialize `License`:
	err = decoder.Decode(&obj.License)
	if err != nil {
		return err
	}
	// Deserialize `Type1`:
	err = decoder.Decode(&obj.Type1)
	if err != nil {
		return err
	}
	// Deserialize `Type2`:
	err = decoder.Decode(&obj.Type2)
	if err != nil {
		return err
	}
	// Deserialize `Tags`:
	err = decoder.Decode(&obj.Tags)
	if err != nil {
		return err
	}
	return nil
}

// NewCreateDatasetInstruction declares a new CreateDataset instruction with the provided parameters and accounts.
func NewCreateDatasetInstruction(
	// Parameters:
	name string,
	scale uint8,
	license uint8,
	type1 uint8,
	type2 uint8,
	tags string,
	// Accounts:
	dataset ag_solanago.PublicKey,
	owner ag_solanago.PublicKey,
	statisticsOwner ag_solanago.PublicKey,
	systemProgram ag_solanago.PublicKey) *CreateDataset {
	return NewCreateDatasetInstructionBuilder().
		SetName(name).
		SetScale(scale).
		SetLicense(license).
		SetType1(type1).
		SetType2(type2).
		SetTags(tags).
		SetDatasetAccount(dataset).
		SetOwnerAccount(owner).
		SetStatisticsOwnerAccount(statisticsOwner).
		SetSystemProgramAccount(systemProgram)
}
